#include<iostream>
#include<cstdio>
#include<cstring>
#include<sstream>
#include<string>
#include<algorithm>
#include<cmath>
#include<climits>
#include<vector>
#include<stack>
#include<queue>
#include<map>
#include<set>

#define AND &&
#define OR ||
#define READ freopen("input.txt","r+",stdin)
#define WRITE freopen("output.txt","w+",stdout)

#define pb push_back
#define sf scanf
#define pf printf


using namespace std;

int N;
vector<int> adj[110];
bool isCritical[110];
int parent[110];
bool visit[110];
int disc[110];
int low[110];
int timer = 0;



void articulationPoint( int u ){
    int v,i,noc = 0;
    visit[u] = true;
    low[u] = disc[u] = ++timer;
    for( i = 0; i < adj[u].size(); i++ ){
        v = adj[u][i];
        if( !visit[v] ){
            noc++;
            parent[v] = u;
            articulationPoint( v );

            low[u] = min(low[u],low[v]);

            if( parent[u] != -1 AND  low[v] >= disc[u] )
                isCritical[u] = true;
            if( parent[u]==-1 AND noc > 1 )
                isCritical[u] = true;
        }
        else if( v != parent[u] )
            low[u] = min(low[u],disc[v]);
    }
}

int main(){
    string line;
    int u,v,i,counter;
    while( true ){
        sf("%d", &N);
        getchar();
        if( N == 0 )    break;
        while( true ){
            getline(cin,line);
            //if( line.length() == 1 AND line == "0" )

            stringstream st(line);
            st>>u;
            if( u == 0 )
                break;
            while( st >> v ){
                adj[u].pb(v);
                adj[v].pb(u);
            }
        }
        for( i = 1; i <= N; i++ ){
            parent[i]     = -1;
            visit[i]      = false;
            isCritical[i] = false;
            disc[u]       = 0;
            low[u]        = 0;
        }
        timer = 0;
        counter = 0;
        for( i = 1; i <= N; i++ )
            if( !visit[i] )
                articulationPoint(1);

        for( i = 1; i <= N; i++ ){
            if( isCritical[i] )
                counter++;
            adj[i].clear();
        }

        pf("%d\n",counter);
    }


    return 0;
}


